// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/xescugc/ltw/inputer (interfaces: Inputer)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	ebiten "github.com/hajimehoshi/ebiten/v2"
)

// MockInputer is a mock of Inputer interface.
type MockInputer struct {
	ctrl     *gomock.Controller
	recorder *MockInputerMockRecorder
}

// MockInputerMockRecorder is the mock recorder for MockInputer.
type MockInputerMockRecorder struct {
	mock *MockInputer
}

// NewMockInputer creates a new mock instance.
func NewMockInputer(ctrl *gomock.Controller) *MockInputer {
	mock := &MockInputer{ctrl: ctrl}
	mock.recorder = &MockInputerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInputer) EXPECT() *MockInputerMockRecorder {
	return m.recorder
}

// CursorPosition mocks base method.
func (m *MockInputer) CursorPosition() (int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CursorPosition")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	return ret0, ret1
}

// CursorPosition indicates an expected call of CursorPosition.
func (mr *MockInputerMockRecorder) CursorPosition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CursorPosition", reflect.TypeOf((*MockInputer)(nil).CursorPosition))
}

// IsKeyJustPressed mocks base method.
func (m *MockInputer) IsKeyJustPressed(arg0 ebiten.Key) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsKeyJustPressed", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsKeyJustPressed indicates an expected call of IsKeyJustPressed.
func (mr *MockInputerMockRecorder) IsKeyJustPressed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsKeyJustPressed", reflect.TypeOf((*MockInputer)(nil).IsKeyJustPressed), arg0)
}

// IsMouseButtonJustPressed mocks base method.
func (m *MockInputer) IsMouseButtonJustPressed(arg0 ebiten.MouseButton) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsMouseButtonJustPressed", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsMouseButtonJustPressed indicates an expected call of IsMouseButtonJustPressed.
func (mr *MockInputerMockRecorder) IsMouseButtonJustPressed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMouseButtonJustPressed", reflect.TypeOf((*MockInputer)(nil).IsMouseButtonJustPressed), arg0)
}
