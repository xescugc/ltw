// Code generated by "enumer -type=Type -transform=snake -output=type_string.go -json"; DO NOT EDIT.

package action

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _TypeName = "cursor_movecamera_zoomsummon_unittpsremove_unitsteal_liveplace_towerremove_towerselect_towerselected_towerselected_tower_invaliddeselect_towerincome_ticktower_attackunit_killedwindow_resizingplayer_readynavigate_tostart_gameopen_tower_menuclose_tower_menugo_homechecked_pathchange_unit_linejoin_roomadd_playerremove_playerupdate_state"

var _TypeIndex = [...]uint16{0, 11, 22, 33, 36, 47, 57, 68, 80, 92, 106, 128, 142, 153, 165, 176, 191, 203, 214, 224, 239, 255, 262, 274, 290, 299, 309, 322, 334}

const _TypeLowerName = "cursor_movecamera_zoomsummon_unittpsremove_unitsteal_liveplace_towerremove_towerselect_towerselected_towerselected_tower_invaliddeselect_towerincome_ticktower_attackunit_killedwindow_resizingplayer_readynavigate_tostart_gameopen_tower_menuclose_tower_menugo_homechecked_pathchange_unit_linejoin_roomadd_playerremove_playerupdate_state"

func (i Type) String() string {
	if i < 0 || i >= Type(len(_TypeIndex)-1) {
		return fmt.Sprintf("Type(%d)", i)
	}
	return _TypeName[_TypeIndex[i]:_TypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TypeNoOp() {
	var x [1]struct{}
	_ = x[CursorMove-(0)]
	_ = x[CameraZoom-(1)]
	_ = x[SummonUnit-(2)]
	_ = x[TPS-(3)]
	_ = x[RemoveUnit-(4)]
	_ = x[StealLive-(5)]
	_ = x[PlaceTower-(6)]
	_ = x[RemoveTower-(7)]
	_ = x[SelectTower-(8)]
	_ = x[SelectedTower-(9)]
	_ = x[SelectedTowerInvalid-(10)]
	_ = x[DeselectTower-(11)]
	_ = x[IncomeTick-(12)]
	_ = x[TowerAttack-(13)]
	_ = x[UnitKilled-(14)]
	_ = x[WindowResizing-(15)]
	_ = x[PlayerReady-(16)]
	_ = x[NavigateTo-(17)]
	_ = x[StartGame-(18)]
	_ = x[OpenTowerMenu-(19)]
	_ = x[CloseTowerMenu-(20)]
	_ = x[GoHome-(21)]
	_ = x[CheckedPath-(22)]
	_ = x[ChangeUnitLine-(23)]
	_ = x[JoinRoom-(24)]
	_ = x[AddPlayer-(25)]
	_ = x[RemovePlayer-(26)]
	_ = x[UpdateState-(27)]
}

var _TypeValues = []Type{CursorMove, CameraZoom, SummonUnit, TPS, RemoveUnit, StealLive, PlaceTower, RemoveTower, SelectTower, SelectedTower, SelectedTowerInvalid, DeselectTower, IncomeTick, TowerAttack, UnitKilled, WindowResizing, PlayerReady, NavigateTo, StartGame, OpenTowerMenu, CloseTowerMenu, GoHome, CheckedPath, ChangeUnitLine, JoinRoom, AddPlayer, RemovePlayer, UpdateState}

var _TypeNameToValueMap = map[string]Type{
	_TypeName[0:11]:         CursorMove,
	_TypeLowerName[0:11]:    CursorMove,
	_TypeName[11:22]:        CameraZoom,
	_TypeLowerName[11:22]:   CameraZoom,
	_TypeName[22:33]:        SummonUnit,
	_TypeLowerName[22:33]:   SummonUnit,
	_TypeName[33:36]:        TPS,
	_TypeLowerName[33:36]:   TPS,
	_TypeName[36:47]:        RemoveUnit,
	_TypeLowerName[36:47]:   RemoveUnit,
	_TypeName[47:57]:        StealLive,
	_TypeLowerName[47:57]:   StealLive,
	_TypeName[57:68]:        PlaceTower,
	_TypeLowerName[57:68]:   PlaceTower,
	_TypeName[68:80]:        RemoveTower,
	_TypeLowerName[68:80]:   RemoveTower,
	_TypeName[80:92]:        SelectTower,
	_TypeLowerName[80:92]:   SelectTower,
	_TypeName[92:106]:       SelectedTower,
	_TypeLowerName[92:106]:  SelectedTower,
	_TypeName[106:128]:      SelectedTowerInvalid,
	_TypeLowerName[106:128]: SelectedTowerInvalid,
	_TypeName[128:142]:      DeselectTower,
	_TypeLowerName[128:142]: DeselectTower,
	_TypeName[142:153]:      IncomeTick,
	_TypeLowerName[142:153]: IncomeTick,
	_TypeName[153:165]:      TowerAttack,
	_TypeLowerName[153:165]: TowerAttack,
	_TypeName[165:176]:      UnitKilled,
	_TypeLowerName[165:176]: UnitKilled,
	_TypeName[176:191]:      WindowResizing,
	_TypeLowerName[176:191]: WindowResizing,
	_TypeName[191:203]:      PlayerReady,
	_TypeLowerName[191:203]: PlayerReady,
	_TypeName[203:214]:      NavigateTo,
	_TypeLowerName[203:214]: NavigateTo,
	_TypeName[214:224]:      StartGame,
	_TypeLowerName[214:224]: StartGame,
	_TypeName[224:239]:      OpenTowerMenu,
	_TypeLowerName[224:239]: OpenTowerMenu,
	_TypeName[239:255]:      CloseTowerMenu,
	_TypeLowerName[239:255]: CloseTowerMenu,
	_TypeName[255:262]:      GoHome,
	_TypeLowerName[255:262]: GoHome,
	_TypeName[262:274]:      CheckedPath,
	_TypeLowerName[262:274]: CheckedPath,
	_TypeName[274:290]:      ChangeUnitLine,
	_TypeLowerName[274:290]: ChangeUnitLine,
	_TypeName[290:299]:      JoinRoom,
	_TypeLowerName[290:299]: JoinRoom,
	_TypeName[299:309]:      AddPlayer,
	_TypeLowerName[299:309]: AddPlayer,
	_TypeName[309:322]:      RemovePlayer,
	_TypeLowerName[309:322]: RemovePlayer,
	_TypeName[322:334]:      UpdateState,
	_TypeLowerName[322:334]: UpdateState,
}

var _TypeNames = []string{
	_TypeName[0:11],
	_TypeName[11:22],
	_TypeName[22:33],
	_TypeName[33:36],
	_TypeName[36:47],
	_TypeName[47:57],
	_TypeName[57:68],
	_TypeName[68:80],
	_TypeName[80:92],
	_TypeName[92:106],
	_TypeName[106:128],
	_TypeName[128:142],
	_TypeName[142:153],
	_TypeName[153:165],
	_TypeName[165:176],
	_TypeName[176:191],
	_TypeName[191:203],
	_TypeName[203:214],
	_TypeName[214:224],
	_TypeName[224:239],
	_TypeName[239:255],
	_TypeName[255:262],
	_TypeName[262:274],
	_TypeName[274:290],
	_TypeName[290:299],
	_TypeName[299:309],
	_TypeName[309:322],
	_TypeName[322:334],
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// TypeStrings returns a slice of all String values of the enum
func TypeStrings() []string {
	strs := make([]string, len(_TypeNames))
	copy(strs, _TypeNames)
	return strs
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Type
func (i Type) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Type
func (i *Type) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Type should be a string, got %s", data)
	}

	var err error
	*i, err = TypeString(s)
	return err
}
