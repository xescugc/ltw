// Code generated by "enumer -type=Type -transform=lower -transform=snake -output=type_string.go"; DO NOT EDIT.

package unit

import (
	"fmt"
	"strings"
)

const _TypeName = "spiritspirit2flamflam2octopusoctopus2raccongold_racooncyclopecyclope2"

var _TypeIndex = [...]uint8{0, 6, 13, 17, 22, 29, 37, 43, 54, 61, 69}

const _TypeLowerName = "spiritspirit2flamflam2octopusoctopus2raccongold_racooncyclopecyclope2"

func (i Type) String() string {
	if i < 0 || i >= Type(len(_TypeIndex)-1) {
		return fmt.Sprintf("Type(%d)", i)
	}
	return _TypeName[_TypeIndex[i]:_TypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TypeNoOp() {
	var x [1]struct{}
	_ = x[Spirit-(0)]
	_ = x[Spirit2-(1)]
	_ = x[Flam-(2)]
	_ = x[Flam2-(3)]
	_ = x[Octopus-(4)]
	_ = x[Octopus2-(5)]
	_ = x[Raccon-(6)]
	_ = x[GoldRacoon-(7)]
	_ = x[Cyclope-(8)]
	_ = x[Cyclope2-(9)]
}

var _TypeValues = []Type{Spirit, Spirit2, Flam, Flam2, Octopus, Octopus2, Raccon, GoldRacoon, Cyclope, Cyclope2}

var _TypeNameToValueMap = map[string]Type{
	_TypeName[0:6]:        Spirit,
	_TypeLowerName[0:6]:   Spirit,
	_TypeName[6:13]:       Spirit2,
	_TypeLowerName[6:13]:  Spirit2,
	_TypeName[13:17]:      Flam,
	_TypeLowerName[13:17]: Flam,
	_TypeName[17:22]:      Flam2,
	_TypeLowerName[17:22]: Flam2,
	_TypeName[22:29]:      Octopus,
	_TypeLowerName[22:29]: Octopus,
	_TypeName[29:37]:      Octopus2,
	_TypeLowerName[29:37]: Octopus2,
	_TypeName[37:43]:      Raccon,
	_TypeLowerName[37:43]: Raccon,
	_TypeName[43:54]:      GoldRacoon,
	_TypeLowerName[43:54]: GoldRacoon,
	_TypeName[54:61]:      Cyclope,
	_TypeLowerName[54:61]: Cyclope,
	_TypeName[61:69]:      Cyclope2,
	_TypeLowerName[61:69]: Cyclope2,
}

var _TypeNames = []string{
	_TypeName[0:6],
	_TypeName[6:13],
	_TypeName[13:17],
	_TypeName[17:22],
	_TypeName[22:29],
	_TypeName[29:37],
	_TypeName[37:43],
	_TypeName[43:54],
	_TypeName[54:61],
	_TypeName[61:69],
}

// TypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TypeString(s string) (Type, error) {
	if val, ok := _TypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Type values", s)
}

// TypeValues returns all values of the enum
func TypeValues() []Type {
	return _TypeValues
}

// TypeStrings returns a slice of all String values of the enum
func TypeStrings() []string {
	strs := make([]string, len(_TypeNames))
	copy(strs, _TypeNames)
	return strs
}

// IsAType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Type) IsAType() bool {
	for _, v := range _TypeValues {
		if i == v {
			return true
		}
	}
	return false
}
