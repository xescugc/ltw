// Code generated by "enumer -type=Buff -transform=lower -json -transform=snake -output=buff_string.go"; DO NOT EDIT.

package buff

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BuffName = "burrowoed"

var _BuffIndex = [...]uint8{0, 9}

const _BuffLowerName = "burrowoed"

func (i Buff) String() string {
	if i < 0 || i >= Buff(len(_BuffIndex)-1) {
		return fmt.Sprintf("Buff(%d)", i)
	}
	return _BuffName[_BuffIndex[i]:_BuffIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BuffNoOp() {
	var x [1]struct{}
	_ = x[Burrowoed-(0)]
}

var _BuffValues = []Buff{Burrowoed}

var _BuffNameToValueMap = map[string]Buff{
	_BuffName[0:9]:      Burrowoed,
	_BuffLowerName[0:9]: Burrowoed,
}

var _BuffNames = []string{
	_BuffName[0:9],
}

// BuffString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BuffString(s string) (Buff, error) {
	if val, ok := _BuffNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BuffNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Buff values", s)
}

// BuffValues returns all values of the enum
func BuffValues() []Buff {
	return _BuffValues
}

// BuffStrings returns a slice of all String values of the enum
func BuffStrings() []string {
	strs := make([]string, len(_BuffNames))
	copy(strs, _BuffNames)
	return strs
}

// IsABuff returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Buff) IsABuff() bool {
	for _, v := range _BuffValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Buff
func (i Buff) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Buff
func (i *Buff) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Buff should be a string, got %s", data)
	}

	var err error
	*i, err = BuffString(s)
	return err
}
