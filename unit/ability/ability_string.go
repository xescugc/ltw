// Code generated by "enumer -type=Ability -transform=lower -json -transform=snake -output=ability_string.go"; DO NOT EDIT.

package ability

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AbilityName = "efficiencytankfastsplitburrowresurrectionflycamouflagehybridattack"

var _AbilityIndex = [...]uint8{0, 10, 14, 18, 23, 29, 41, 44, 54, 60, 66}

const _AbilityLowerName = "efficiencytankfastsplitburrowresurrectionflycamouflagehybridattack"

func (i Ability) String() string {
	if i < 0 || i >= Ability(len(_AbilityIndex)-1) {
		return fmt.Sprintf("Ability(%d)", i)
	}
	return _AbilityName[_AbilityIndex[i]:_AbilityIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AbilityNoOp() {
	var x [1]struct{}
	_ = x[Efficiency-(0)]
	_ = x[Tank-(1)]
	_ = x[Fast-(2)]
	_ = x[Split-(3)]
	_ = x[Burrow-(4)]
	_ = x[Resurrection-(5)]
	_ = x[Fly-(6)]
	_ = x[Camouflage-(7)]
	_ = x[Hybrid-(8)]
	_ = x[Attack-(9)]
}

var _AbilityValues = []Ability{Efficiency, Tank, Fast, Split, Burrow, Resurrection, Fly, Camouflage, Hybrid, Attack}

var _AbilityNameToValueMap = map[string]Ability{
	_AbilityName[0:10]:       Efficiency,
	_AbilityLowerName[0:10]:  Efficiency,
	_AbilityName[10:14]:      Tank,
	_AbilityLowerName[10:14]: Tank,
	_AbilityName[14:18]:      Fast,
	_AbilityLowerName[14:18]: Fast,
	_AbilityName[18:23]:      Split,
	_AbilityLowerName[18:23]: Split,
	_AbilityName[23:29]:      Burrow,
	_AbilityLowerName[23:29]: Burrow,
	_AbilityName[29:41]:      Resurrection,
	_AbilityLowerName[29:41]: Resurrection,
	_AbilityName[41:44]:      Fly,
	_AbilityLowerName[41:44]: Fly,
	_AbilityName[44:54]:      Camouflage,
	_AbilityLowerName[44:54]: Camouflage,
	_AbilityName[54:60]:      Hybrid,
	_AbilityLowerName[54:60]: Hybrid,
	_AbilityName[60:66]:      Attack,
	_AbilityLowerName[60:66]: Attack,
}

var _AbilityNames = []string{
	_AbilityName[0:10],
	_AbilityName[10:14],
	_AbilityName[14:18],
	_AbilityName[18:23],
	_AbilityName[23:29],
	_AbilityName[29:41],
	_AbilityName[41:44],
	_AbilityName[44:54],
	_AbilityName[54:60],
	_AbilityName[60:66],
}

// AbilityString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AbilityString(s string) (Ability, error) {
	if val, ok := _AbilityNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AbilityNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Ability values", s)
}

// AbilityValues returns all values of the enum
func AbilityValues() []Ability {
	return _AbilityValues
}

// AbilityStrings returns a slice of all String values of the enum
func AbilityStrings() []string {
	strs := make([]string, len(_AbilityNames))
	copy(strs, _AbilityNames)
	return strs
}

// IsAAbility returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Ability) IsAAbility() bool {
	for _, v := range _AbilityValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Ability
func (i Ability) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Ability
func (i *Ability) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Ability should be a string, got %s", data)
	}

	var err error
	*i, err = AbilityString(s)
	return err
}
